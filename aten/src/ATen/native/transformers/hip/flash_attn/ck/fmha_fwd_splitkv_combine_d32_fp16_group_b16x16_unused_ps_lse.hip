// ==========================================
// THIS CODE IS AUTOGENERATED. DO NOT MODIFY.
// @generated
// ==========================================
// SPDX-License-Identifier: MIT
// Copyright (c) 2018-2024, Advanced Micro Devices, Inc. All rights reserved.

// auto generated by generate.py
#include "fmha_fwd.hpp"

using fmha_dtype_0 = ck_tile::fp16_t;

namespace {
template <ck_tile::index_t kLogMaxSplits>
struct kernel_runner {
using fmha_trait = ck_tile::TileFmhaFwdSplitKVCombineTraits<true,
                                                    false,
                                                    true,
                                                    false,
                                                    kLogMaxSplits,
                                                    -1>;

using fmha_pipeline_problem = ck_tile::BlockFmhaSplitKVCombinePipelineProblem<
    typename FmhaFwdTypeConfig<fmha_dtype_0>::LSEDataType,
    typename FmhaFwdTypeConfig<fmha_dtype_0>::OaccDataType,
    typename FmhaFwdTypeConfig<fmha_dtype_0>::ODataType,
    32,
    16, 
    16,
    true,
    fmha_trait>;

using fmha_pipeline = ck_tile::BlockFmhaFwdSplitKVCombinePipeline<
    fmha_pipeline_problem>;

using fmha_epilogue =
    ck_tile::Default2DEpilogue<ck_tile::Default2DEpilogueProblem<typename FmhaFwdTypeConfig<ck_tile::fp16_t>::OaccDataType,
                                           typename FmhaFwdTypeConfig<ck_tile::fp16_t>::ODataType,
                                           true, false>>;

using fmha_kernel =
    ck_tile::FmhaFwdSplitKVCombineKernel<ck_tile::FmhaFwdSplitKVCombineTilePartitioner<16, 16>,
                  fmha_pipeline,
                  fmha_epilogue>;

static void run(const ck_tile::stream_config& s, fmha_fwd_splitkv_args a)
{
    using k_ = fmha_kernel;
    auto [kargs, grids] = fmha_fwd_splitkv_combine_create_kargs_and_grids<k_>(a);
    constexpr dim3 blocks             = k_::BlockSize();
    constexpr ck_tile::index_t kBlockPerCu = k_::kBlockPerCu;
    ck_tile::make_kernel<blocks.x, kBlockPerCu>(k_{}, grids, blocks, 0, kargs)(ck_tile::stream_config{s.stream_id_});
}
};
}

using trait_0 = fmha_fwd_splitkv_combine_traits_<32, ck_tile::fp16_t, true, 16, 16,
                        true, false, true, false>;

#include <iostream>

template<>
void fmha_fwd_splitkv_combine_oneshot_<trait_0>(const ck_tile::stream_config& s, fmha_fwd_splitkv_args a)
{
    if (a.num_splits <= 8) {
        kernel_runner<3>::run(s, a);
    } else if (a.num_splits <= 16) {
        kernel_runner<4>::run(s, a);
    } else if (a.num_splits <= 32) {
        kernel_runner<5>::run(s, a);
    } else if (a.num_splits <= 64) {
        kernel_runner<6>::run(s, a);
    } else if (a.num_splits <= 128) {
        kernel_runner<7>::run(s, a);
    }
}

template<>
std::string fmha_fwd_splitkv_combine_get_name_<trait_0>()
{
    using k_ = kernel_runner<6>::fmha_kernel; /// FIXME: choose real kernel type
    return k_::GetName();
}
