// ==========================================
// THIS CODE IS AUTOGENERATED. DO NOT MODIFY.
// @generated
// ==========================================
// SPDX-License-Identifier: MIT
// Copyright (c) 2018-2024, Advanced Micro Devices, Inc. All rights reserved.

// auto generated by generate.py
#include "fmha_fwd.hpp"

using fmha_dtype_0 = ck_tile::fp16_t;

using fmha_trait_0 = ck_tile::TileFmhaFwdAppendKVTraits<true,
                                                    true,
                                                    true,
                                                    true,
                                                    -1>;

using fmha_pipeline_problem_0 = ck_tile::BlockFmhaFwdAppendKVPipelineProblem<
    typename FmhaFwdTypeConfig<fmha_dtype_0>::QDataType,
    typename FmhaFwdTypeConfig<fmha_dtype_0>::KDataType,
    typename FmhaFwdTypeConfig<fmha_dtype_0>::VDataType,
    64,
    64,
    128,
    128,
    false,
    ck_tile::RotaryEmbeddingEnum::NONE,
    true,
    fmha_trait_0>;

using fmha_pipeline_0 = ck_tile::BlockFmhaFwdAppendKVPipeline<
    fmha_pipeline_problem_0>;

using fmha_kernel_0 =
    ck_tile::FmhaFwdAppendKVKernel<ck_tile::FmhaFwdAppendKVTilePartitioner<64, 64, 128, 128>,
                  fmha_pipeline_0>;

using trait_0 = fmha_fwd_appendkv_traits_<128, ck_tile::fp16_t, 64, 64, 128, 128, false,
                        true, true, true, true, ck_tile::RotaryEmbeddingEnum::NONE, true>;

#include <iostream>

template<>
float fmha_fwd_appendkv_<trait_0>(const ck_tile::stream_config& s, fmha_fwd_appendkv_args a)
{
    using k_ = fmha_kernel_0;
    if(s.log_level_ > 0)
        std::cout << ", " << k_::GetName() << std::flush;
    auto [kargs, grids] = fmha_fwd_appendkv_create_kargs_and_grids<k_>(a);
    constexpr dim3 blocks             = k_::BlockSize();
    constexpr ck_tile::index_t kBlockPerCu = k_::kBlockPerCu;
    return ck_tile::launch_kernel(s, ck_tile::make_kernel<blocks.x, kBlockPerCu>(k_{}, grids, blocks, 0, kargs));
}
